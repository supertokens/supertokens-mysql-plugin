plugins {
    id 'java-library'
}

version = "5.0.6"

repositories {
    mavenCentral()
}

dependencies {
    compileOnly project(":supertokens-plugin-interface")
    testImplementation project(":supertokens-plugin-interface")
    testImplementation project(":supertokens-core")

    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.1'

    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.0'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compileOnly group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    compileOnly group: 'org.jetbrains', name: 'annotations', version: '13.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compileOnly group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.14.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0'

    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.1.0'

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    testImplementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.1'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    testImplementation 'com.tngtech.archunit:archunit-junit4:0.22.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.14.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0'
}

jar {
    archiveBaseName.set('mysql-plugin')
}

task copyJars(type: Copy) {
    into "$buildDir/dependencies"
    from configurations.runtimeClasspath
}

def interfaceName = "io.supertokens.pluginInterface.Storage"
def className = "io.supertokens.storage.mysql.Start"
def pluginName = "mysql"

task generateMetaInf {
    doFirst {
        mkdir "src/main/resources/META-INF/services"
        file("src/main/resources/META-INF/services/${interfaceName}").text = "${className}"
    }
}

build.dependsOn generateMetaInf

test {
    jvmArgs '-Djava.security.egd=file:/dev/urandom'
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}